Recommended SRE-Grade “No-Downtime (Reader-First)” Approach
Step 1. Create custom parameter groups

(You may already have from previous setup)

# For the cluster
aws rds create-db-cluster-parameter-group \
  --db-cluster-parameter-group-name aurora-pg-cdc-cluster \
  --db-parameter-group-family aurora-postgresql16 \
  --description "CDC enabled cluster parameter group"

# For the instances
aws rds create-db-parameter-group \
  --db-parameter-group-name aurora-pg-cdc-instance \
  --db-parameter-group-family aurora-postgresql16 \
  --description "CDC enabled instance parameter group"

Step 2. Modify parameters (pending reboot)
aws rds modify-db-cluster-parameter-group \
  --db-cluster-parameter-group-name aurora-pg-cdc-cluster \
  --parameters \
    "ParameterName=rds.logical_replication,ParameterValue=1,ApplyMethod=pending-reboot" \
    "ParameterName=max_replication_slots,ParameterValue=10,ApplyMethod=pending-reboot" \
    "ParameterName=max_wal_senders,ParameterValue=10,ApplyMethod=pending-reboot"

aws rds modify-db-parameter-group \
  --db-parameter-group-name aurora-pg-cdc-instance \
  --parameters \
    "ParameterName=wal_level,ParameterValue=logical,ApplyMethod=pending-reboot"


These are now pending — no downtime yet.

Step 3. Attach new parameter groups
aws rds modify-db-cluster \
  --db-cluster-identifier ordering-postgres-qa \
  --db-cluster-parameter-group-name aurora-pg-cdc-cluster \
  --apply-immediately

aws rds modify-db-instance \
  --db-instance-identifier ordering-postgres-1-qa \
  --db-parameter-group-name aurora-pg-cdc-instance \
  --apply-immediately


No restart yet — but the system flags these changes as “pending reboot.”

Step 4. Apply with zero downtime (reader-first)

If your Aurora cluster has a reader:

1️⃣ Reboot a reader first:

aws rds reboot-db-instance \
  --db-instance-identifier ordering-postgres-2-qa


Verify after reboot:

SHOW rds.logical_replication;
SHOW wal_level;


✅ should show:

rds.logical_replication = on
wal_level = logical


2️⃣ If good, fail over the reader to be the new writer:

aws rds failover-db-cluster \
  --db-cluster-identifier ordering-postgres-qa


⏱️ Aurora failover typically takes 30–60 seconds — this becomes your effective “downtime.”

3️⃣ (Optional) Reboot the old writer (now reader) later.

Step 5. Validate

Connect to the new writer:

SHOW rds.logical_replication;
SHOW wal_level;
SHOW max_wal_senders;
SHOW max_replication_slots;

Step 6. Create the publication (no reboot required)

Now you can safely create your CDC publication:

CREATE PUBLICATION openflow_publication FOR ALL TABLES;


and replication slot:

SELECT * FROM pg_create_logical_replication_slot('openflow_slot', 'pgoutput');






--------------------------------------

1) Confirm your engine + families
# Cluster engine & family
aws rds describe-db-clusters \
  --db-cluster-identifier ordering-postgres-qa \
  --query "DBClusters[0].[Engine,EngineVersion,DBClusterParameterGroup]" \
  --output table

# One instance’s family (instance parameter group family)
aws rds describe-db-instances \
  --query "DBInstances[?DBClusterIdentifier=='ordering-postgres-qa']|[0].[DBInstanceIdentifier,DBParameterGroups[0].DBParameterGroupName,Engine,EngineVersion]" \
  --output table

2) See whether wal_level is even available
# In the INSTANCE parameter group you tried to modify
aws rds describe-db-parameters \
  --db-parameter-group-name aurora-pg-cdc-instance \
  --query "Parameters[?ParameterName=='wal_level']" \
  --output json


If this returns [], that family doesn’t expose wal_level → don’t try to set it.

3) What to set instead (always safe)

Set cluster-level logical replication knobs (these do exist):

aws rds modify-db-cluster-parameter-group \
  --db-cluster-parameter-group-name aurora-pg-cdc-cluster \
  --parameters \
    "ParameterName=rds.logical_replication,ParameterValue=1,ApplyMethod=pending-reboot" \
    "ParameterName=max_replication_slots,ParameterValue=10,ApplyMethod=pending-reboot" \
    "ParameterName=max_wal_senders,ParameterValue=10,ApplyMethod=pending-reboot"


For Aurora PG16+: wal_level is already logical and absent from instance params. Just set the three cluster params above and proceed.

For Aurora PG14/15 (some families): if wal_level does show up in step 2, then you can set it on the instance group:

aws rds modify-db-parameter-group \
  --db-parameter-group-name aurora-pg-cdc-instance \
  --parameters "ParameterName=wal_level,ParameterValue=logical,ApplyMethod=pending-reboot"

4) Attach groups, apply with minimal disruption
# Attach groups (no reboot yet; changes become 'pending-reboot')
aws rds modify-db-cluster \
  --db-cluster-identifier ordering-postgres-qa \
  --db-cluster-parameter-group-name aurora-pg-cdc-cluster \
  --apply-immediately

aws rds modify-db-instance \
  --db-instance-identifier ordering-postgres-1-qa \
  --db-parameter-group-name aurora-pg-cdc-instance \
  --apply-immediately


Reader-first activation:

# Reboot a reader first
aws rds reboot-db-instance --db-instance-identifier ordering-postgres-2-qa

# Verify on that node
psql -c "SHOW rds.logical_replication;"
psql -c "SHOW wal_level;"
psql -c "SHOW max_wal_senders;"
psql -c "SHOW max_replication_slots;"

# Optional: fail over so the new writer has the settings active with ~30–60s blip
aws rds failover-db-cluster --db-cluster-identifier ordering-postgres-qa

5) Create the publication (no reboot)
CREATE PUBLICATION openflow_publication FOR ALL TABLES;  -- or list specific tables
-- If needed by your connector:
SELECT * FROM pg_create_logical_replication_slot('openflow_slot','pgoutput');








--------------------- 3rd Level -----------------------

aws rds modify-db-cluster-parameter-group \
  --db-cluster-parameter-group-name aurora-pg-cdc-cluster \
  --parameters \
    "ParameterName=rds.logical_replication,ParameterValue=1,ApplyMethod=pending-reboot" \
    "ParameterName=max_replication_slots,ParameterValue=10,ApplyMethod=pending-reboot" \
    "ParameterName=max_wal_senders,ParameterValue=10,ApplyMethod=pending-reboot"
